ANS:1---
Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null......
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast)
            {
                slow=head;
                while(slow!=fast)
                {
                    slow=slow.next;
                    fast=fast.next;
                }
                return slow;
            }
        }
        return null;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:2--
Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.
class Solution {
    public ListNode middleNode(ListNode head) {
        if(head.next==null && head==null)
        {
            return null;
        }
        int countnodes=0;
        ListNode temp=head;
        while(temp!=null)
        {
            temp=temp.next;
            countnodes++;
        }
        int n=(countnodes/2);
        temp=head;
        while(n!=0)
        {
            temp=temp.next;
            n--;
        }
        return temp;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:3--
Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.
class Solution {
    public ListNode findmid(ListNode head)
    {
          ListNode slow=head;
            ListNode fast=head;
            while(fast!=null && fast.next!=null)
            {
                slow=slow.next;
                fast=fast.next.next;
            }
            return slow;
    }
    public boolean isPalindrome(ListNode head) {
        if(head == null && head.next!=null)
        {
            return true;
        }
        ListNode midnode =findmid(head);
        ListNode prev=null;
        ListNode curr=midnode;
          ListNode next;
          while(curr!=null)
          {
              next=curr.next;
              curr.next=prev;
              prev=curr;
              curr=next;
          }
            ListNode right=prev;
              ListNode left =head;
              while(right!=null)
              {
                  if(left.val!=right.val){
                      return false;
                  }
                  left=left.next;
                  right=right.next;
              }
              return true;

    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:4----
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
      ListNode mergedlist =new ListNode(-1);
      ListNode temp = mergedlist;
      while(list1!=null && list2!=null)
      {
          if(list1.val<=list2.val)
          {
              temp.next=list1;
              list1=list1.next;
              temp=temp.next;
          }
          else
          {
              temp.next=list2;
              list2=list2.next;
              temp=temp.next;
          }
      }
      while(list1!=null)
      {
          temp.next=list1;
          list1=list1.next;
          temp=temp.next;
      }
       while(list2!=null)
      {
          temp.next=list2;
          list2=list2.next;
          temp=temp.next;
      }
      return mergedlist.next;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:5--
Given the head of a linked list, return the list after sorting it in ascending order.


